--------------------#######################################################----------------------

1. What is Fastlane?

Fastlane is a command-line tool to automate building, testing, and deploying mobile apps.
Key things it does:
Build APKs/AABs (Android) or IPAs (iOS)
Manage code signing and provisioning
Run automated tests
Deploy to App Store / TestFlight / Play Store
Send build notifications to Slack or email

üí° In React Native, Fastlane works on the native side (android/ and ios/ folders), but it will also bundle your JS code automatically during builds.
--------------------#######################################################----------------------

2. Why use Fastlane in React Native?

Automates repetitive tasks: no need to open Android Studio or Xcode every time
Ensures consistent builds in CI/CD pipelines
Handles signing automatically (keystores for Android, provisioning profiles for iOS)
Can integrate with GitHub Actions, Bitrise, CircleCI, etc.
Helps with testing, screenshots, and distributing to testers quickly
--------------------#######################################################----------------------

3. How to Integrate Fastlane in a React Native Project
Step 1: Install Fastlane
# macOS (iOS + Android)
brew install fastlane
--------------------#######################################################----------------------

# Or via Ruby
sudo gem install fastlane -NV

Android only: Windows/Linux/macOS can use Fastlane for Android too.

Step 2: Initialize Fastlane
Navigate to native folders and initialize:
Android
cd android
fastlane init

iOS
cd ios
fastlane init

You‚Äôll be prompted to choose your platform and workflow (manual or automatic).
Fastlane will create a Fastfile and Appfile for configuration.

Step 3: Define Lanes

Lanes are predefined workflows.
Example Fastfile for React Native:

default_platform(:android)

platform :android do
  desc "Build debug APK"
  lane :assemble_debug do
    gradle(task: "assembleDebug")
  end

  desc "Build release APK and upload to Play Store Beta"
  lane :beta do
    gradle(task: "bundleRelease")
    supply(track: "beta", json_key: "./playstore-key.json")
  end
end

gradle(task: "assembleDebug") ‚Üí builds debug APK
supply ‚Üí uploads APK/AAB to Play Store

--------------------#######################################################----------------------
default_platform(:ios)

platform :ios do
  desc "Build debug IPA for testing"
  lane :assemble_debug do
    build_app(
      workspace: "MyApp.xcworkspace",
      scheme: "MyApp",
      configuration: "Debug",
      export_method: "development"
    )
  end

  desc "Build release IPA and upload to TestFlight"
  lane :beta do
    build_app(
      workspace: "MyApp.xcworkspace",
      scheme: "MyApp",
      configuration: "Release",
      export_method: "app-store"
    )
    upload_to_testflight(
      username: "your_apple_id@example.com"
    )
  end
end
--------------------#######################################################----------------------

Run Fastlane lane:
cd ios
fastlane assemble_debug   # for debug IPA
fastlane beta

Step 4: Use in CI/CD

You can run Fastlane commands in CI pipelines:
cd android
fastlane assemble_debug
# or
fastlane beta

React Native JS bundle is generated automatically during native build.

Fastlane handles signing, versioning, and deployment automatically.
--------------------#######################################################----------------------

Step 5: Optional Automation

Integrate with GitHub Actions, Bitrise, CircleCI
Automate:
Building on push
Running tests

Deploying to testers or stores

Sending Slack notifications

--------------------#######################################################----------------------
What is json_key in Fastlane‚Äôs supply?
supply(track: "beta", json_key: "./playstore-key.json")


supply ‚Üí Fastlane action to upload Android APK/AAB to Google Play Store.
track: "beta" ‚Üí Uploads the build to the Beta track (instead of production).
json_key ‚Üí Path to a Google Service Account JSON file.
Details about json_key

Google Play API access
To upload automatically, Fastlane uses Google Play Developer API.
You need a Service Account with permissions to upload apps.
Creating the JSON file
Go to Google Play Console ‚Üí Settings ‚Üí API access
Create a Service Account in Google Cloud.
Grant it Release Manager or higher permission.
Download the JSON key file.
Place it in your project (e.g., ./playstore-key.json).

What‚Äôs inside the JSON
client_email
private_key
project_id
Other credentials to authenticate with Google Play API

Why it‚Äôs needed

Without json_key, Fastlane cannot authenticate with Google Play.
It allows Fastlane to upload your app securely without manually logging in.

--------------------#######################################################----------------------

What you can do with Fastlane locally (without CI/CD)

Fastlane automates all manual tasks related to building and deploying apps.
Android
Build APK or AAB:

cd android
fastlane assemble_debug   # debug APK
fastlane bundleRelease    # release AAB

Upload to Google Play:

fastlane supply(
  track: "beta",
  json_key: "./playstore-key.json"
)

Manage version codes / version names automatically
Run unit tests or lint checks during build
iOS
Build IPA:

cd ios
fastlane build_app(
  scheme: "MyApp",
  workspace: "MyApp.xcworkspace"
)

Upload to TestFlight:
fastlane upload_to_testflight(
  username: "your_apple_id@example.com"
)

Manage code signing automatically with match
Run unit/UI tests
--------------------#######################################################----------------------

2. What this means practically

Even without CI/CD, you can run lanes locally on your machine:
Build your app
Upload it to Play Store / TestFlight
Run tests, manage signing, increment versions
Essentially, Fastlane replaces repetitive manual tasks and makes release faster and safer.
--------------------#######################################################----------------------

3. Limitations without CI/CD

You still have to run the lanes manually (fastlane beta) on your computer.
No automation when you push code ‚Äî every release requires a manual step.
CI/CD adds triggered automation (on push/merge) which Fastlane alone cannot do.

‚úÖ Summary
With only Fastlane: You can build, test, sign, and deploy your React Native app locally.
With Fastlane + CI/CD: All of this happens automatically whenever code changes.
--------------------#######################################################----------------------

üìò Fastlane Setup Notes for React Native

Your project should look like this:
project-root/
 ‚îú‚îÄ android/
 ‚îÇ   ‚îú‚îÄ app/
 ‚îÇ   ‚îú‚îÄ build.gradle
 ‚îÇ   ‚îî‚îÄ fastlane/
 ‚îÇ        ‚îú‚îÄ Fastfile       # Android lanes
 ‚îÇ        ‚îî‚îÄ Appfile        # Android config
 ‚îÇ
 ‚îú‚îÄ ios/
 ‚îÇ   ‚îú‚îÄ YourApp.xcworkspace
 ‚îÇ   ‚îî‚îÄ fastlane/
 ‚îÇ        ‚îú‚îÄ Fastfile       # iOS lanes
 ‚îÇ        ‚îî‚îÄ Appfile        # iOS config
 ‚îÇ
 ‚îî‚îÄ fastlane/ (optional shared config if needed)

üìù Appfile Examples
Android android/fastlane/Appfile
json_key_file("../playstore-service-account.json") # Google Play key
package_name("com.yourcompany.yourapp")

iOS ios/fastlane/Appfile
apple_id("your@email.com")   # Apple Developer account
team_id("YOUR_TEAM_ID")      # Apple Developer Team ID

üìù Fastfile Examples
Android android/fastlane/Fastfile
default_platform(:android)

platform :android do
  desc "Build Android APK"
  lane :build_apk do
    gradle(
      task: "assemble",
      build_type: "Release"
    )
  end

  desc "Build Android AAB"
  lane :build_aab do
    gradle(
      task: "bundle",
      build_type: "Release"
    )
  end

  desc "Deploy to Play Store (Internal Track)"
  lane :deploy do
    build_aab
    upload_to_play_store(
      track: 'internal',
      aab: '../app/build/outputs/bundle/release/app-release.aab'
    )
  end
end

iOS ios/fastlane/Fastfile
default_platform(:ios)

platform :ios do
  desc "Build iOS app"
  lane :build do
    gym(
      scheme: "YourApp",             # Xcode scheme
      export_method: "app-store"     # or ad-hoc/development
    )
  end

  desc "Upload to TestFlight"
  lane :beta do
    build
    upload_to_testflight
  end

  desc "Deploy to App Store"
  lane :release do
    build
    deliver(force: true)   # uploads to App Store Connect
  end
end

üîë Required Credentials

Android ‚Üí playstore-service-account.json

Get from Google Play Console ‚Üí Setup > API Access > Create Service Account.

iOS ‚Üí api_key.json (alternative to password)

Create from App Store Connect ‚Üí Users and Access > Keys > Generate API Key.

Keep these files outside your repo (e.g., ../keys/).

üöÄ Common Commands
Android
cd android
fastlane build_apk      # Build APK
fastlane build_aab      # Build AAB
fastlane deploy         # Upload to Play Store internal track

iOS
cd ios
fastlane build          # Build IPA
fastlane beta           # Upload to TestFlight
fastlane release        # Upload to App Store

‚ö° How Appfile Works

Fastlane auto-loads Appfile in the same fastlane/ folder.

You don‚Äôt need to pass paths manually ‚Üí upload_to_play_store reads from Appfile.

‚ö†Ô∏è Common Pitfalls

Wrong folder structure (must be fastlane/).

Using wrong relative path for JSON/keys.

Not setting correct bundle id / package name in Appfile.

Mixing iOS + Android config in the same Appfile (keep separate).

CI/CD ‚Üí Ensure keys are added as secrets (don‚Äôt hardcode).

‚úÖ Best Practice

Store service keys outside repo (../keys/).

Use .gitignore to avoid committing keys.

Use fastlane env to debug config.

Always test with internal track or TestFlight before production release.

--------------------#######################################################----------------------
